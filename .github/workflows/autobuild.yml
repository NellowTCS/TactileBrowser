name: Build TactileBrowser

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  desktop-build-universal:
    name: Build Desktop Universal Binary (macOS)
    runs-on: macos-latest

    env:
      SDL2_SRC_DIR: ${{ github.workspace }}/sdl2-source
      SDL2_BUILD_DIR_X86: ${{ github.workspace }}/sdl2-build-x86_64
      SDL2_BUILD_DIR_ARM: ${{ github.workspace }}/sdl2-build-arm64
      SDL2_UNIVERSAL_DIR: ${{ github.workspace }}/sdl2-universal

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Calculate cache key suffix
        id: cache-key
        run: echo "CACHE_KEY_SUFFIX=$(git hash-object desktop-src/CMakeLists.txt)" >> $GITHUB_ENV

      - name: Cache SDL2 source
        uses: actions/cache@v3
        id: cache-sdl2-src
        with:
          path: sdl2-source
          key: sdl2-source-v1

      - name: Cache SDL2 builds
        uses: actions/cache@v3
        id: cache-sdl2-builds
        with:
          path: |
            sdl2-build-x86_64
            sdl2-build-arm64
          key: sdl2-builds-${{ env.CACHE_KEY_SUFFIX }}
          restore-keys: sdl2-builds-

      - name: Clone SDL2 source if missing
        if: steps.cache-sdl2-src.outputs.cache-hit != 'true'
        run: git clone -b SDL2 https://github.com/libsdl-org/SDL.git sdl2-source

      - name: Build and install SDL2 for x86_64
        if: steps.cache-sdl2-builds.outputs.cache-hit != 'true'
        run: |
          mkdir -p $SDL2_BUILD_DIR_X86
          cd $SDL2_BUILD_DIR_X86
          cmake $SDL2_SRC_DIR \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$SDL2_BUILD_DIR_X86/install
          make
          make install

      - name: Build and install SDL2 for arm64
        if: steps.cache-sdl2-builds.outputs.cache-hit != 'true'
        run: |
          mkdir -p $SDL2_BUILD_DIR_ARM
          cd $SDL2_BUILD_DIR_ARM
          cmake $SDL2_SRC_DIR \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$SDL2_BUILD_DIR_ARM/install
          make
          make install

      # Verify SDL2 dylibs exist before creating universal binary
      - name: Verify SDL2 builds exist
        run: |
          echo "Checking for SDL2 dylibs..."
          if [ -f "$SDL2_BUILD_DIR_X86/install/lib/libSDL2-2.0.0.dylib" ]; then
            echo "✓ x86_64 SDL2 dylib found"
            ls -la "$SDL2_BUILD_DIR_X86/install/lib/"
          elif [ -f "$SDL2_BUILD_DIR_X86/install/lib/libSDL2.dylib" ]; then
            echo "✓ x86_64 SDL2 dylib found (generic name)"
            ls -la "$SDL2_BUILD_DIR_X86/install/lib/"
          else
            echo "✗ x86_64 SDL2 dylib NOT found"
            echo "Contents of x86_64 build directory:"
            find "$SDL2_BUILD_DIR_X86" -name "*.dylib" 2>/dev/null || echo "No dylibs found"
          fi
          
          if [ -f "$SDL2_BUILD_DIR_ARM/install/lib/libSDL2-2.0.0.dylib" ]; then
            echo "✓ arm64 SDL2 dylib found"
            ls -la "$SDL2_BUILD_DIR_ARM/install/lib/"
          elif [ -f "$SDL2_BUILD_DIR_ARM/install/lib/libSDL2.dylib" ]; then
            echo "✓ arm64 SDL2 dylib found (generic name)"
            ls -la "$SDL2_BUILD_DIR_ARM/install/lib/"
          else
            echo "✗ arm64 SDL2 dylib NOT found"
            echo "Contents of arm64 build directory:"
            find "$SDL2_BUILD_DIR_ARM" -name "*.dylib" 2>/dev/null || echo "No dylibs found"
          fi

      - name: Create universal SDL2 dylib and setup headers
        run: |
          mkdir -p $SDL2_UNIVERSAL_DIR/lib
          mkdir -p $SDL2_UNIVERSAL_DIR/include/SDL2
          
          # Determine the actual SDL2 dylib filenames
          SDL2_X86_DYLIB=""
          SDL2_ARM_DYLIB=""
          
          # Check for different possible SDL2 dylib names
          if [ -f "$SDL2_BUILD_DIR_X86/install/lib/libSDL2-2.0.0.dylib" ]; then
            SDL2_X86_DYLIB="$SDL2_BUILD_DIR_X86/install/lib/libSDL2-2.0.0.dylib"
          elif [ -f "$SDL2_BUILD_DIR_X86/install/lib/libSDL2.dylib" ]; then
            SDL2_X86_DYLIB="$SDL2_BUILD_DIR_X86/install/lib/libSDL2.dylib"
          elif [ -f "$SDL2_BUILD_DIR_X86/libSDL2.dylib" ]; then
            SDL2_X86_DYLIB="$SDL2_BUILD_DIR_X86/libSDL2.dylib"
          fi
          
          if [ -f "$SDL2_BUILD_DIR_ARM/install/lib/libSDL2-2.0.0.dylib" ]; then
            SDL2_ARM_DYLIB="$SDL2_BUILD_DIR_ARM/install/lib/libSDL2-2.0.0.dylib"
          elif [ -f "$SDL2_BUILD_DIR_ARM/install/lib/libSDL2.dylib" ]; then
            SDL2_ARM_DYLIB="$SDL2_BUILD_DIR_ARM/install/lib/libSDL2.dylib"
          elif [ -f "$SDL2_BUILD_DIR_ARM/libSDL2.dylib" ]; then
            SDL2_ARM_DYLIB="$SDL2_BUILD_DIR_ARM/libSDL2.dylib"
          fi
          
          # Check if both dylibs were found
          if [ -z "$SDL2_X86_DYLIB" ] || [ -z "$SDL2_ARM_DYLIB" ]; then
            echo "Error: One or both SDL2 dylibs are missing!"
            echo "x86_64 dylib: $SDL2_X86_DYLIB"
            echo "arm64 dylib: $SDL2_ARM_DYLIB"
            exit 1
          fi
          
          echo "Using x86_64 dylib: $SDL2_X86_DYLIB"
          echo "Using arm64 dylib: $SDL2_ARM_DYLIB"
          
          lipo -create \
            "$SDL2_X86_DYLIB" \
            "$SDL2_ARM_DYLIB" \
            -output $SDL2_UNIVERSAL_DIR/lib/libSDL2.dylib
          
          echo "Universal SDL2 dylib created at $SDL2_UNIVERSAL_DIR/lib/libSDL2.dylib"
          
          # Create additional symlinks for compatibility
          cd $SDL2_UNIVERSAL_DIR/lib
          ln -sf libSDL2.dylib libSDL2-2.0.0.dylib
          ln -sf libSDL2.dylib libSDL2-2.0.dylib
          
          # Copy SDL2 headers to both expected locations
          # Copy to SDL2/ subdirectory for LVGL
          cp -r $SDL2_SRC_DIR/include/* $SDL2_UNIVERSAL_DIR/include/SDL2/
          # Also copy to root include for direct access
          cp -r $SDL2_SRC_DIR/include/* $SDL2_UNIVERSAL_DIR/include/
          
          echo "SDL2 headers copied to both $SDL2_UNIVERSAL_DIR/include/ and $SDL2_UNIVERSAL_DIR/include/SDL2/"

      - name: Cache CMake build files
        uses: actions/cache@v3
        id: cmake-cache
        with:
          path: desktop-src/CMakeFiles
          key: cmake-build-universal-${{ env.CACHE_KEY_SUFFIX }}
          restore-keys: cmake-build-universal-

      - name: Debug directory structure
        working-directory: desktop-src
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of desktop-src:"
          ls -la
          echo "Looking for CMakeLists.txt files:"
          find . -name "CMakeLists.txt" -exec echo "Found: {}" \; -exec head -3 {} \;

      - name: Build with CMake and Make (universal)
        working-directory: desktop-src
        run: |
          cmake . -DCMAKE_BUILD_TYPE=Debug \
                  -DSDL2_LIBRARY=$SDL2_UNIVERSAL_DIR/lib/libSDL2.dylib \
                  -DSDL2_INCLUDE_DIR=$SDL2_UNIVERSAL_DIR/include
          make

      - name: Bundle SDL2 dylib with app and fix paths
        working-directory: desktop-src
        run: |
          # Create Frameworks directory in the app bundle
          mkdir -p main/TactileBrowser.app/Contents/Frameworks
          
          # Copy SDL2 dylib to the app bundle
          cp $SDL2_UNIVERSAL_DIR/lib/libSDL2.dylib main/TactileBrowser.app/Contents/Frameworks/
          
          # Also create the versioned dylib that the app expects
          cd main/TactileBrowser.app/Contents/Frameworks/
          ln -sf libSDL2.dylib libSDL2-2.0.0.dylib
          
          # Fix the dylib paths in the executable using install_name_tool
          cd ../MacOS
          install_name_tool -change @rpath/libSDL2-2.0.0.dylib @executable_path/../Frameworks/libSDL2-2.0.0.dylib TactileBrowser
          
          # Verify the changes
          echo "Checking dylib dependencies:"
          otool -L TactileBrowser

      - name: Create distribution directory
        working-directory: desktop-src
        run: |
          mkdir -p ../dist
          cp -r main/TactileBrowser.app ../dist/

      - name: Archive macOS app bundle (universal)
        uses: actions/upload-artifact@v4
        with:
          name: TactileBrowser-macOS-universal
          path: dist/
          compression-level: 6

  espidf-build:
    name: Build ESP-IDF apps
    runs-on: ubuntu-latest
    env:
      IDF_VERSION: v5.4
      PIP_CACHE_DIR: ~/.cache/pip
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache ESP-IDF SDK
        id: cache-esp-idf-sdk
        uses: actions/cache@v3
        with:
          path: esp-idf
          key: esp-idf-${{ env.IDF_VERSION }}-${{ runner.os }}-v1
          restore-keys: esp-idf-

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-v1
          restore-keys: pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git wget flex bison gperf python3 python3-pip python3-setuptools cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0

      - name: Download and install ESP-IDF if missing
        run: |
          if [ ! -f "esp-idf/install.sh" ]; then
            wget -q https://github.com/espressif/esp-idf/releases/download/v${{ env.IDF_VERSION }}/esp-idf-v${{ env.IDF_VERSION }}.zip -O esp-idf.zip
            unzip -q esp-idf.zip
            mv esp-idf-v${{ env.IDF_VERSION }} esp-idf
          fi
          python3 -m pip install --upgrade pip setuptools
          python3 esp-idf/tools/idf_tools.py install-python-env
          python3 esp-idf/tools/idf_tools.py install

      - name: Setup ESP-IDF environment variables
        run: |
          echo "IDF_PATH=$PWD/esp-idf" >> $GITHUB_ENV
          echo "$PWD/esp-idf/tools" >> $GITHUB_PATH

      - name: Build ESP32 firmware with TactilityTool
        working-directory: src
        run: |
          . ../esp-idf/export.sh
          python3 tactility.py build all

      - name: Upload ESP32 ELF artifact
        uses: actions/upload-artifact@v4
        with:
          name: TactileBrowser-esp32-elf
          path: src/build-esp32/TactileBrowser.app.elf

      - name: Upload ESP32S3 ELF artifact
        uses: actions/upload-artifact@v4
        with:
          name: TactileBrowser-esp32s3-elf
          path: src/build-esp32s3/TactileBrowser.app.elf